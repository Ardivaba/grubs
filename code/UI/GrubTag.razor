@namespace Grubs.UI

@using Grubs.Pawn
@using Sandbox;
@using Sandbox.UI;
@using Sandbox.Utility

@inherits PanelComponent

<root>
    <div
        class="title"
        style="color: linear-gradient(@Color.Hex, adjust-hue(@Color.Hex, 45));">
        @Grub.Name
    </div>
    <div class="health-container" style="background-color: darken(@Color.Hex, 60%)">
        <div class="health-bar" style="width: @(_health / 150f * 100f)%;
        background-image: linear-gradient(@Color.Hex, darken(@Color.Hex, 20%))">
            <div class="health-bar-overflow" style="width: @((_health - 150f) / 150f * 100f)%;
            background-image: linear-gradient(to right, @Color.Hex, adjust-hue(@Color.Hex, 45))"/>
        </div>
    </div>
</root>

@code
{
    [Property] public required Grub Grub { get; set; }
    [Property] public Color Color { get; set; }

    private float _health;
    private const float _transitionRate = 50f;

    protected override void OnStart()
    {
        base.OnStart();

        // Transform.Position = Grub.Transform.Position + Vector3.Up * 44f;
        _health = Grub.Health.CurrentHealth;
    }

    protected override void OnUpdate()
    {
        if (_health != Grub.Health.CurrentHealth)
        {
            var delta = Grub.Health.CurrentHealth < _health ? -1 : 1;
            var health = _health + delta * Time.Delta * _transitionRate;
            _health = health.Clamp(Math.Min(_health, Grub.Health.CurrentHealth), Math.Max(_health, Grub.Health.CurrentHealth));
        }

        var scale = 128f / -(GrubFollowCamera.Local.Transform.Position.y - Grub.Transform.Position.y);
        var up = Vector3.Up * 40f;

        var sc = Scene.Camera.PointToScreenNormal(Grub.Transform.Position + up);
        // sc = sc.WithX(sc.x - Panel.Box.Rect.Width / 2 * Panel.ScaleFromScreen);
        // sc = sc.WithY(sc.y * (1f / scale));
        Panel.Style.Left = Length.Percent(sc.x * 100f);
        Panel.Style.Top = Length.Percent(sc.y * 100f);

        var tr = new PanelTransform();
        tr.AddScale(scale);
        tr.AddTranslateX(Length.Percent(-50f));
        tr.AddTranslateY(Length.Percent(-50f));
        Panel.Style.Transform = tr;
    }

    /// <summary>
    /// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
    /// </summary>
    protected override int BuildHash()
    {
        return HashCode.Combine(Grub.Name, Grub.Health.CurrentHealth, _health, Color.Hex, Time.Now);
    }
}