@namespace Grubs.UI

@using Sandbox
@using Sandbox.UI
@inherits Sandbox.UI.Panel

@attribute [StyleSheet]

<root />

@code {
    private string _inputAction;
    private InputGlyphSize _inputGlyphSize;
    private bool _outline;

    protected override void OnAfterTreeRender(bool firstTime)
    {
        Update();
    }

    public void SetAction(string inputAction)
    {
        if (_inputAction == inputAction)
            return;

        _inputAction = inputAction;

        // Silly hack so we can get joystick glyphs that also appear as pressed when we move them instead of pressing them in.
        if (_inputAction == "analogmove")
        {
            BindClass("pressed", () => !Input.AnalogMove.IsNearlyZero());
            _inputAction = "camera_reset";
        }
        else if (_inputAction == "analoglook")
        {
            BindClass("pressed", () => !Input.AnalogLook.IsNearlyZero());
            _inputAction = "toggle_equipment";
        }
        else
        {
            BindClass("pressed", () => Input.Down(_inputAction));
        }

        Update();
    }

    public override void SetProperty(string name, string value)
    {
        switch (name)
        {
            case "action":
                {
                    SetAction(value);
                    Update();

                    break;
                }

            case "size":
                {
                    Enum.TryParse(value, true, out _inputGlyphSize);
                    Update();

                    break;
                }

            case "outline":
                {
                    _outline = value switch
                    {
                        "true" => true,
                        "false" => false,
                        _ => _outline
                    };

                    Update();
                    break;
                }
        }

        base.SetProperty(name, value);
    }

    private void Update()
    {
        var texture = Input.GetGlyph(_inputAction, _inputGlyphSize, _outline);
        Style.BackgroundImage = texture;
    }

    protected override int BuildHash()
    {
        return HashCode.Combine(Input.UsingController);
    }
}