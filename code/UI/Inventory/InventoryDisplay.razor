@namespace Grubs.UI.Inventory

@using Grubs.Equipment
@using Grubs.Equipment.Weapons
@using Grubs.Pawn
@using Grubs.UI.Components
@using Sandbox;
@using Sandbox.UI

@inherits Panel

@attribute [StyleSheet]

@if (Inventory is null)
{
    return;
}

<root>
    <div @ref=TooltipPanel class="tooltip @(HoveredItemPanel is null ? "hide" : "")">
        @(HoveredItemPanel is null ? "" : HoveredItemPanel.Equipment.Name)
    </div>
    <div class="inv-panel">
        <div class="inv-title">
            <label>Inventory</label>
        </div>
        <div class="inv-content">
            <div class="inv-weapons">
                @foreach (var eq in Inventory.Equipment)
                {
                    <InventoryItem Equipment=@eq InventoryDisplay=@this />
                }
            </div>
            <div class="inv-tools">
                @* TODO: Split inv into weapons vs tools *@
            </div>
        </div>
    </div>
</root

@code
{
	public PlayerInventory Inventory { get; set; }
	public InventoryItem HoveredItemPanel { get; set; }

	private Panel TooltipPanel { get; set; }

	private const int _columns = 5;
	private int _rows => (int)Math.Ceiling((float)_totalItems / _columns);
	private int _totalItems => Inventory.Equipment.Count();

	private int _currentGamepadIndex;
	private bool _usedJoystick;

	public override void Tick()
	{
		SetClass("hide", !Inventory.InventoryOpen);
		Cursor.Enabled("inv", Inventory.InventoryOpen);

		if (!Inventory.InventoryOpen) return;

		if(HoveredItemPanel is not null) 
		{
			Log.Info(HoveredItemPanel.ScaleFromScreen);
			//Log.Info(Length.Pixels(HoveredItemPanel.Box.Rect.Left / ScaleToScreen));
			TooltipPanel.Style.Left = (HoveredItemPanel.Box.Rect.Left - Box.Rect.Left) * ScaleFromScreen - 15;
			TooltipPanel.Style.Top = (HoveredItemPanel.Box.Rect.Top - Box.Rect.Top ) * ScaleFromScreen - 60;
		}

        if (!Input.UsingController) return;

        if (Math.Round(Input.AnalogMove.Length) != 0 && !_usedJoystick)
        {
            _usedJoystick = true;
            PlayerInventory.Local.EquipItem(Inventory.Equipment.ElementAtOrDefault(SelectNextItemGamepadInput()));
        }

        if (Math.Round(Input.AnalogMove.Length) == 0 && _usedJoystick)
        {
            _usedJoystick = false;
        }
    }

    protected override int BuildHash()
    {
        return HashCode.Combine(Inventory.InventoryOpen, Inventory.EquipmentActive, Inventory.ActiveSlot, HoveredItemPanel?.GetHashCode());
    }

    private int SelectNextItemGamepadInput()
    {
        var analogX = Input.AnalogMove.x;
        var analogY = -Input.AnalogMove.y;

        var currentRow = _currentGamepadIndex / _columns;
        var currentColumn = _currentGamepadIndex % _columns;

        currentRow = analogX switch
        {
            > 0 => (currentRow - 1 + _rows) % _rows,
            < 0 => (currentRow + 1) % _rows,
            _ => currentRow
        };

        switch (analogY)
        {
            case < 0:
                currentColumn = (currentColumn - 1 + _columns) % _columns;
                break;
            case > 0:
                currentColumn = (currentColumn + 1) % _columns;
                break;
        }

        _currentGamepadIndex = currentRow * _columns + currentColumn;

        return _currentGamepadIndex;
    }
}